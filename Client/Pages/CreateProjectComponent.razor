@page "/project/create"
@using ProjectBank.Server.Entities
@inject HttpClient HttpClient
@inject NavigationManager MyNavigationManager
@inject IToastService toastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Create a project!</h1>
<p>Fill in the form and click create!</p>



<div class="row justify-content-center">
    <div class="col-md-10">
        <div class="card mt-3 mb-3">
            <div class="card-header">
                <h2>Create Project</h2>
            </div>
            <div class="card-body">


                <EditForm Model="@project">
                    <DataAnnotationsValidator />


                    <div>
                        <div class="form-group">
                            <label for="name"><Tooltip Text="Max characters is 50">Title</Tooltip></label>
                            <InputText id="name" @bind-Value="project.Name" class="form-control" />
                        </div>
                    </div>
                    <div class="desc-field">
                        <label class="control-label col-md-12"><Tooltip Text="Max characters is 500">Description</Tooltip></label>
                        <div class="col">
                            <textarea @bind="project.Description" @bind:event="oninput" style="width: 100%; height: 100%">  </textarea>
                        </div>
                    </div>

                </EditForm>
                <div>
                    <button @onclick="createProject">Create Project</button>
                </div>
            </div>
        </div>
    </div>
</div>





@code
{

    private Project project = new();

    public async Task createProject()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var email = authState.User.Claims.First(cl => cl.Type.ToString() == "email").Value;
        Console.WriteLine(email);
        var e = await HttpClient.GetFromJsonAsync<UserDTO>($"Project/Email/{email}");
        project.AuthorId = e.Id;

        var response = await HttpClient.PostAsJsonAsync("Project/Post", project);


        if (response.IsSuccessStatusCode)
        {
            MyNavigationManager.NavigateTo("myprojects");
            toastService.ShowSuccess("You successfully created a project");
        }
        else
        {
            if (project.Name.Length > 50)
                toastService.ShowError("Error, Title too long");
            else if (project.Description.Length > 500)
            {
                toastService.ShowError("Error, Description too long");
            }
            else
            {
                toastService.ShowError("Error, Another project already has that title");
            }
        }

    }
}