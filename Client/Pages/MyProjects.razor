@page "/myprojects"
@using ProjectBank.Shared
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject IToastService toastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView Roles="Supervisor">
    <h1>My Projects</h1>

    @if (Projects.Count != 0)
    {
        <p>These are all your projects on Project Bank!</p>
        @foreach (var project in Projects)
        {
            <div class="row justify-content-center">
                <div class="col-md-10">
                    <div class="card mt-3 mb-3">
                        <div class="card-header">
                            <h2><a href="project/@project.Id">@project.Name</a></h2>
                        </div>
                        <div class="card-body">
                        </div>
                    </div>
                </div>
            </div>
        }

    }
    else
    {
        <p>You currently do not have any projects!</p>
    }

</AuthorizeView>
<AuthorizeView Roles="Student">
    <h1>Projects you have applied to</h1>

    @if (Projects.Count != 0)
    {
        <p>These are all the projects you have applied to!</p>
        @foreach (var project in Projects)
        {
            <div class="row justify-content-center">
                <div class="col-md-10">
                    <div class="card mt-3 mb-3">
                        <div class="card-header">
                            <h2><a href="project/@project.Id">@project.Name</a></h2>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</AuthorizeView>

<style>
    h1, p, h2 {
        text-align: center !important;
    }
</style>

@code
{


    private List<SimplifiedProjectDTO> Projects = new();
    private UserDTO currentUser;
    private Project currentProject = new();

    protected override async Task OnInitializedAsync()
    {       
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Claims.First(cl => cl.Type.ToString() == "email").Value;

        var user = await HttpClient.GetFromJsonAsync<UserDTO>($"Project/Email/{email}");
        currentUser = user;

        if (currentUser.IsSupervisor)
        {
            Projects = await HttpClient.GetFromJsonAsync<List<SimplifiedProjectDTO>>($"Project/Author/{user.Id}");

        } 
        else
        {
            Projects = await HttpClient.GetFromJsonAsync<List<SimplifiedProjectDTO>>($"Project/Student/{user.Id}");
        }        


        }

    

    private async Task Selected(Project p)
    {
        currentProject = p;
        await Delete();
    }

    private async Task Delete()
    {   
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the project?"))
        {

            await HttpClient.DeleteAsync($"Project/Delete/{currentProject.Id}");
            string success = "You successfully deleted the project";

           
            //MEGET SCUFFED FIX TIL AT DEN IKKE RELOADER SIDEN - HURTIGT GÅ TIL ANDEN SIDE OG DEREFTER TILBAGE
            MyNavigationManager.NavigateTo("allprojects");
            MyNavigationManager.NavigateTo("myprojects");
            toastService.ShowSuccess(success);
        }
    }
}