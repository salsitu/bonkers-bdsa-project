@page "/project/{id:int}"
@inject HttpClient HttpClient
@using ProjectBank.Shared
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager MyNavigationManager
@inject IToastService toastService
@inject IJSRuntime JSRuntime
<h1>@SelectedProject.Name</h1>


<div class="border">
    <div class="stats"> <!--Statistics Div-->
        <table>
            <tr>
                <th>Views</th>
                <th>Applications</th>
                <th>Ratio</th>
            </tr>
            <tr>
                <th>@Views</th>
                <th>@Applications</th>
                <th>@Ratio</th>
            </tr>
        </table>
    </div>
    <div>
        <div> <h2>Title</h2>
            <span>@SelectedProject.Name</span>
        </div>
        <div><h2>Description</h2>
            @SelectedProject.Description
        </div>
    </div>
</div>
<AuthorizeView Roles="Supervisor">
    @if (currentUser.Id == SelectedProject.AuthorId)
    {
        <button @onclick="Delete">Delete project</button>
    }
</AuthorizeView>
<AuthorizeView Roles="Student">
    @if (Applied)
    {
        <span>You have already applied for this project!</span>

    } else
    {
        <button @onclick="ApplyForProject">Apply for project</button>    
    }
</AuthorizeView>

<!---
@if (currentUser != null)
{
    @if (currentUser.IsSupervisor && currentUser.Id == SelectedProject.AuthorId)
    {
        //<button @onclick="Delete">Delete project</button>


    }
    if (!currentUser.IsSupervisor)

{
        if (Applied)
        {
           //<span>You have already applied for this project!</span>

        } else
        {
            //<button @onclick="ApplyForProject">Apply for project</button>    
        }



    } 
}-->



@code{

    [Parameter] public int id {get; set;}

    private bool IsSupervisor;
    private Project SelectedProject = new();
    private bool Applied;
    private int Views = 0;
    private int Applications = 0;
    private double Ratio;
    private UserDTO currentUser;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Claims.First(cl => cl.Type.ToString() == "email").Value;

        var user = await HttpClient.GetFromJsonAsync<UserDTO>($"Project/Email/{email}");
        currentUser = user;

        if (!currentUser.IsSupervisor)
        {
            var studentId = user.Id;
            var response = await HttpClient.PutAsJsonAsync($"Project/PutView/{id}", studentId);
            isApplied();

        }


        SelectedProject = await HttpClient.GetFromJsonAsync<Project>($"Project/{id}");

        Views = await HttpClient.GetFromJsonAsync<int>($"Project/GetViews/{id}");

        Applications = await HttpClient.GetFromJsonAsync<int>($"Project/Applications/{id}");

        SetRatio();





    }

    public void SetRatio() 
    {
        if (Views == 0) Ratio = 0;
        else if  (Applications == 0) Ratio = 0;
        else  Ratio = Views / Applications; 
    }

    private async Task Delete()
    {   
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the project?"))
        {
            string toastMsg = "You successfully deleted the project";
            using var httpresponse = await HttpClient.DeleteAsync($"Project/Delete/{SelectedProject.Id}");
            if (!httpresponse.IsSuccessStatusCode) {
                toastMsg = "An error has occured: " + httpresponse.ReasonPhrase;
                toastService.ShowError(toastMsg);
                MyNavigationManager.NavigateTo("allprojects");
                MyNavigationManager.NavigateTo("myprojects");
                toastService.ShowError(toastMsg);
                return;
            }

            toastService.ShowSuccess(toastMsg);
            //MEGET SCUFFED FIX TIL AT DEN IKKE RELOADER SIDEN - HURTIGT GÅ TIL ANDEN SIDE OG DEREFTER TILBAGE
            MyNavigationManager.NavigateTo("allprojects");
            MyNavigationManager.NavigateTo("myprojects");
            toastService.ShowSuccess(toastMsg);
        }
    }

    public async void ApplyForProject()
    {
       

        var response = await HttpClient.PutAsJsonAsync($"Project/Apply/{id}",currentUser.Id);

        if (response.IsSuccessStatusCode)         
        {   
            MyNavigationManager.NavigateTo("myprojects");             
            toastService.ShowSuccess("You successfully applied to project " + SelectedProject.Name);             
        }         
        else         
        {             
            toastService.ShowError("Error");        
        }

    }

    public async void isApplied()
    {
        var studentid = currentUser.Id;
        var x = await HttpClient.GetFromJsonAsync<bool>($"Project/IsApplied/{id}/{studentid}");

        Applied = x;
    } 

}