@page "/project/{id:int}"
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager MyNavigationManager
@inject IToastService toastService
@inject IJSRuntime JSRuntime

<div class="row justify-content-center">
    <div class="col-md-10">
        <div class="card mt-3 mb-3">
            <div class="card-header">
                <h2>@SelectedProject.Name</h2>
            </div>
            <div class="card-body">
                <div>
                    <div class="form-group">
                        <table>
                            <tr>
                                <th>Views</th>
                                <AuthorizeView Roles="Supervisor">
                                    <th>Applications</th>
                                    <th>Ratio</th>
                                </AuthorizeView>
                            </tr>
                            <tr>
                                <th>@Views</th>
                                <AuthorizeView Roles="Supervisor">
                                    <th>@Applications</th>
                                    <th>@Ratio</th>
                                </AuthorizeView>
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="desc-field">
                    <h2>Description</h2>
                    <div class="card-body">
                        <span>@SelectedProject.Description</span>
                    </div>
                </div>
                <div>
                    <AuthorizeView Roles="Supervisor">
                        @if (currentUser != null && SelectedProject != null)
                        {
                            @if (currentUser.Id == SelectedProject.AuthorId)
                            {
                                <button @onclick="Delete">Delete project</button>
                            }

                        }
                    </AuthorizeView>
                    <AuthorizeView Roles="Student">
                        @if (Applied)
                        {
                            <span>You have already applied for this project!</span>

                        }
                        else
                        {
                            <button @onclick="ApplyForProject">Apply for project</button>
                        }
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
</div>



@code {

    [Parameter] public int id { get; set; }


    private Project SelectedProject = new();
    private bool Applied;
    private int Views = 0;
    private int Applications = 0;
    private string Ratio;
    private UserDTO currentUser;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Claims.First(cl => cl.Type.ToString() == "email").Value;

        var user = await HttpClient.GetFromJsonAsync<UserDTO>($"Project/Email/{email}");
        currentUser = user;

        SelectedProject = await HttpClient.GetFromJsonAsync<Project>($"Project/{id}");




        if (!currentUser.IsSupervisor)
        {   
            isApplied();
            var studentId = user.Id;
            var response = await HttpClient.PutAsJsonAsync($"Project/PutView/{id}", studentId);
            Views = await HttpClient.GetFromJsonAsync<int>($"Project/GetViews/{id}");
            

        }
        else if (currentUser.IsSupervisor)
        {
            Views = await HttpClient.GetFromJsonAsync<int>($"Project/GetViews/{id}");
            Applications = await HttpClient.GetFromJsonAsync<int>($"Project/Applications/{id}");
            SetRatio();
        }
    }

    public void SetRatio()
    {
        if (Applications == 0)
        {
            Ratio = string.Format("{0}:{1}", Views, Applications);
            return;
        }
        var greatestCommonDenominator = GCD(Views, Applications);
        Ratio = string.Format("{0}:{1}", Views / greatestCommonDenominator, Applications / greatestCommonDenominator);

    }
    //https://stackoverflow.com/questions/18541832/c-sharp-find-the-greatest-common-divisor
    //Finding the Greatest Common Denominator by using the Euclidean Algorithm
    private int GCD(int Views, int Applications)
    {
        while (Views != 0 && Applications != 0)
        {
            if (Views > Applications)
                Views %= Applications;
            else
                Applications %= Views;
        }

        return Views | Applications;

    }

    private async Task Delete()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the project?"))
        {
            string toastMsg = "You successfully deleted the project";
            using var httpresponse = await HttpClient.DeleteAsync($"Project/Delete/{SelectedProject.Id}");
            var x = await HttpClient.DeleteAsync($"Project/DeleteView/{SelectedProject.Id}");
            var y = await HttpClient.DeleteAsync($"Project/DeleteApplication/{SelectedProject.Id}");
            if (!httpresponse.IsSuccessStatusCode)
            {
                toastMsg = "An error has occured: " + httpresponse.ReasonPhrase;
                toastService.ShowError(toastMsg);
                MyNavigationManager.NavigateTo("allprojects");
                MyNavigationManager.NavigateTo("myprojects");
                toastService.ShowError(toastMsg);
                return;
            }

            toastService.ShowSuccess(toastMsg);
            MyNavigationManager.NavigateTo("allprojects");
            MyNavigationManager.NavigateTo("myprojects");
            toastService.ShowSuccess(toastMsg);
        }
    }

    public async void ApplyForProject()
    {


        var response = await HttpClient.PutAsJsonAsync($"Project/Apply/{id}", currentUser.Id);

        if (response.IsSuccessStatusCode)
        {
            MyNavigationManager.NavigateTo("myprojects");
            toastService.ShowSuccess("You successfully applied to project " + SelectedProject.Name);
        }
        else
        {
            toastService.ShowError("Error");
        }

    }

    public async void isApplied()
    {
        var studentid = currentUser.Id;
        var x = await HttpClient.GetFromJsonAsync<bool>($"Project/IsApplied/{id}/{studentid}");

        Applied = x;
    }

}