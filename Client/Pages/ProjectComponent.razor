@page "/project/{id:int}"
@inject HttpClient HttpClient
@using ProjectBank.Shared
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager MyNavigationManager
@inject IToastService toastService
@inject IJSRuntime JSRuntime
<h1>@SelectedProject.Name</h1>


<div class="border">
    <div class="stats"> <!--Statistics Div-->
        <table>
            <tr>
                <th>Views</th>
                <th>Applications</th>
                <th>Ratio</th>
            </tr>
            <tr>
                <th>@Views</th>
                <th>@Applications</th>
                <th>@Ratio</th>
            </tr>
        </table>
    </div>
    <div>
        <div> <h2>Title</h2>
            <span>@SelectedProject.Name</span>
        </div>
        <div><h2>Description</h2>
            @SelectedProject.Description
        </div>
    </div>
</div>
@if (currentUser != null)
{
    @if (currentUser.IsSupervisor && currentUser.Id == SelectedProject.AuthorId)
    {
        <button @onclick="Delete">Delete project</button>
    }else if (!currentUser.IsSupervisor)
    {
        <button @onclick="ApplyForProject">Apply for project</button>


    }
}



@code{

    [Parameter] public int id {get; set;}

    private bool IsSupervisor;
    private SharedProject SelectedProject = new();

    private int Views = 0;
    private int Applications = 0;
    private double Ratio;
    private UserDTO currentUser;



    protected override async Task OnInitializedAsync()
    {
        SelectedProject = await HttpClient.GetFromJsonAsync<SharedProject>($"Project/{id}");

        Views = await HttpClient.GetFromJsonAsync<int>($"Project/Views/{id}");

        Applications = await HttpClient.GetFromJsonAsync<int>($"Project/Applications/{id}");

        SetRatio();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Claims.First(cl => cl.Type.ToString() == "email").Value;

        var user = await HttpClient.GetFromJsonAsync<UserDTO>($"Project/Email/{email}");
        currentUser = user;


    }

    public async Task SetViews() 
    {
        Views = await HttpClient.GetFromJsonAsync<int>($"Project/Views/{id}");

    }

    public async Task SetApplicants()
    {
        Applications = await HttpClient.GetFromJsonAsync<int>($"Project/Applications/{id}");
    }

    public void Toggle()
    {
        IsSupervisor = !IsSupervisor;
    }



    public (int id, string name, bool supervisor) GetUser()
    {
        return (1,"Paolo", true);
    }

    public void SetRatio() 
    {
        Ratio =  Views < 1 ? 0 : Views/Applications;
    }

    private async Task Delete()
    {   
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the project?"))
        {

            await HttpClient.DeleteAsync($"Project/Delete/{SelectedProject.Id}");
            string success = "You successfully deleted the project";

            toastService.ShowSuccess(success);
            //MEGET SCUFFED FIX TIL AT DEN IKKE RELOADER SIDEN - HURTIGT GÅ TIL ANDEN SIDE OG DEREFTER TILBAGE
            MyNavigationManager.NavigateTo("allprojects");
            MyNavigationManager.NavigateTo("myprojects");
            toastService.ShowSuccess(success);
        }
    }

    public async void ApplyForProject()
    {
        var studentid = currentUser.Id;

        var result = await HttpClient.PutAsJsonAsync($"Project/Apply/{id}",studentid);
        Console.WriteLine("Applied for project");

    }

}