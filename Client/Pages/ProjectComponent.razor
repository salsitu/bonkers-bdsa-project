@page "/project/{id:int}"
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager MyNavigationManager
@inject IToastService toastService
@inject IJSRuntime JSRuntime

<div class="row justify-content-center">
    <div class="col-md-10">
        <div class="card mt-3 mb-3">
            <div class="card-header">
                <h2>@_selectedProject.Name</h2>
            </div>
            <div class="card-body">
                <div>
                    <div class="form-group">
                        <table>
                            <tr>
                                <th>Views</th>
                                <AuthorizeView Roles="Supervisor">
                                    <th>Applications</th>
                                    <th>Ratio</th>
                                </AuthorizeView>
                            </tr>
                            <tr>
                                <th>@_views</th>
                                <AuthorizeView Roles="Supervisor">
                                    <th>@_applications</th>
                                    <th>@_ratio</th>
                                </AuthorizeView>
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="desc-field">
                    <h2>Description</h2>
                    <div class="card-body">
                        <span>@_selectedProject.Description</span>
                    </div>
                </div>
                <div>
                    <AuthorizeView Roles="Supervisor">
                        @if (_currentUser != null && _selectedProject != null)
                        {
                            @if (_currentUser.Id == _selectedProject.AuthorId)
                            {
                                <button @onclick="Delete">Delete project</button>
                            }

                        }
                    </AuthorizeView>
                    <AuthorizeView Roles="Student">
                        @if (_applied)
                        {
                            <span>You have already applied for this project!</span>

                        }
                        else
                        {
                            <button @onclick="ApplyForProject">Apply for project</button>
                        }
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter] public int id { get; set; }

    private Project _selectedProject = new();
    private bool _applied;
    private int _views = 0;
    private int _applications = 0;
    private string? _ratio;
    private UserDTO? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Claims.First(cl => cl.Type.ToString() == "email").Value;

        var user = await HttpClient.GetFromJsonAsync<UserDTO>($"Project/Email/{email}");
        _currentUser = user;

        _selectedProject = await HttpClient.GetFromJsonAsync<Project>($"Project/{id}");




        if (!_currentUser.IsSupervisor)
        {
            isApplied();
            var studentId = user.Id;
            var response = await HttpClient.PutAsJsonAsync($"Project/PutView/{id}", studentId);
            _views = await HttpClient.GetFromJsonAsync<int>($"Project/GetViews/{id}");


        }
        else if (_currentUser.IsSupervisor)
        {
            _views = await HttpClient.GetFromJsonAsync<int>($"Project/GetViews/{id}");
            _applications = await HttpClient.GetFromJsonAsync<int>($"Project/applications/{id}");
            SetRatio();
        }
    }

    public void SetRatio()
    {
        if (_applications == 0)
        {
            _ratio = string.Format("{0}:{1}", _views, _applications);
            return;
        }

        var greatestCommonDenominator = GCD(_views, _applications);
        _ratio = string.Format("{0}:{1}", _views / greatestCommonDenominator, _applications / greatestCommonDenominator);
    }

    // Inspired by: https://stackoverflow.com/questions/18541832/c-sharp-find-the-greatest-common-divisor
    private int GCD(int _views, int _applications)
    {
        while (_views != 0 && _applications != 0)
        {
            if (_views > _applications)
                _views %= _applications;
            else
                _applications %= _views;
        }

        return _views | _applications;
    }

    private async Task Delete()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the project?"))
        {
            string toastMsg = "You successfully deleted the project";
            using var httpresponse = await HttpClient.DeleteAsync($"Project/Delete/{_selectedProject.Id}");
            var x = await HttpClient.DeleteAsync($"Project/DeleteView/{_selectedProject.Id}");
            var y = await HttpClient.DeleteAsync($"Project/DeleteApplication/{_selectedProject.Id}");
            if (!httpresponse.IsSuccessStatusCode)
            {
                toastMsg = "An error has occured: " + httpresponse.ReasonPhrase;
                toastService.ShowError(toastMsg);
                MyNavigationManager.NavigateTo("allprojects");
                MyNavigationManager.NavigateTo("myprojects");
                toastService.ShowError(toastMsg);
                return;
            }

            toastService.ShowSuccess(toastMsg);
            MyNavigationManager.NavigateTo("allprojects");
            MyNavigationManager.NavigateTo("myprojects");
            toastService.ShowSuccess(toastMsg);
        }
    }

    public async void ApplyForProject()
    {
        var response = await HttpClient.PutAsJsonAsync($"Project/Apply/{id}", _currentUser.Id);

        if (response.IsSuccessStatusCode)
        {
            MyNavigationManager.NavigateTo("myprojects");
            toastService.ShowSuccess("You successfully applied to project " + _selectedProject.Name);
        }
        else
        {
            toastService.ShowError("Error");
        }
    }

    public async void isApplied()
    {
        var studentid = _currentUser.Id;
        var x = await HttpClient.GetFromJsonAsync<bool>($"Project/IsApplied/{id}/{studentid}");

        _applied = x;
    }
}